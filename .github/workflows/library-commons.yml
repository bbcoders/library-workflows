name: library-commons

on: 
  workflow_dispatch:
  
jobs:
  build:
    name: build
    environment: library-commons-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: bbcoders/library-commons
          ref: development
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE querymanagement' -uroot -proot
      
      - name: Install dependencies
        run: dotnet restore

      - name: Install dotnet-ef
        run: dotnet tool install --global dotnet-ef

      # - name: Sonarqube Begin
      #   run: | 
      #     dotnet tool install --global dotnet-sonarscanner
      #     dotnet sonarscanner begin /k:"bbcoders_library-commons-workflow" /o:"bbcoders" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
      
      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Apply Migrations And Integration Tests
        run: |
          cd BBCoders.Commons.Tools.IntegrationTests
          dotnet ef database update
          dotnet test

      # - name: Sonarqube end
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    name: publish
    environment: library-commons-publish
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: bbcoders/library-commons
          ref: development
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Create nuget pakcage
        run: dotnet pack -o ./nupkg

      - name: Publish package
        run: dotnet nuget push nupkg/**/*.nupkg --api-key  ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json  --skip-duplicate
      
      - name: Merge code to master
        run: |
          git merge -s ours origin/master
          git checkout origin/master
          git merge development
          git push

